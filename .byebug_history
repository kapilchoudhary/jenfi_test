 expect(parcel.errors).to include("You have not have access to submit a parcel!")
 expect(parcel.errors[:base]).to include("You have not have access to submit a parcel!")
 expect(parcel.errors[:base][0]).to include("You have not have access to submit a parcel!")
continue
 expect(user.role).to eq('parcel_owner')
 expect(user).to be_valid
user
n
@user
user
continue
 Parcel.find(params[:format]).train.parcels.shipped.any?
 Parcel.find(params[:format]).train.parcels.shipped
 Parcel.find(params[:format]).train.parcels
 Parcel.find(params[:format]).train
continue
@train
@train.update(assigned_line: train_params[:train_lines].to_i, status: 2, left_at: Time.current)
  @train = Train.find(params[:id])
continue
Time.now
Time.current
continue
 @train.update(assigned_line: train_params[:train_lines].to_i, status: 2)
@train = Train.find(params[:id])
continue
train_params[:train_lines]
params[:id]
params
@train
train_params
continue
params
continue
@train.first.status
    @train = Train.where("id = ?", params[:id])
@train.first.status
continue
@train.first.remaining_volume_capacity >= @parcel.volume
@train.first.remaining_weight_capacity >= @parcel.weight
@parcel.volume
@parcel.weight
@train.first.remaining_volume_capacity
@train.first.remaining_weight_capacity
@train.first.remaining_weight_capacity >= @parcel.weight && @train.first.remaining_volume_capacity >= @parcel.volume
    @parcel = Parcel.find(params[:parcel])
    @train = Train.where("id = ?", params[:id])
continue
@train.first.remaining_volume_capacity
@train.first.remaining_weight_capacity
@parcel.weight
@train.first.remaining_weight_capacity >= @parcel.weight && @train.first.remaining_volume_capacity >= @parcel.volume
@parcel = Parcel.find(params[:parcel])
@train = Train.where("id = ?", params[:id])
@train.first.remaining_weight_capacity >= @parcel.weight && @train.first.remaining_volume_capacity >= @parcel.volume
@train.first.remaining_weight_capacity >= @parcel.weight && @train.remaining_volume_capacity >= @parcel.volume
    if @train.first.remaining_weight_capacity >= @parcel.weight && @train.remaining_volume_capacity >= @parcel.volume
@train.first.remaining_weight_capacity
@train.remaining_weight_capacity
@train
@train.remaining_weight_capacity >= @parcel.weight && @train.remaining_volume_capacity >= @parcel.volume
@parcel = Parcel.find(params[:parcel])
@train = Train.where("id = ?", params[:id])
continue
 @train.first.remaining_weight_capacity = @train.first.remaining_weight_capacity - @parcel.weight
@train.first.remaining_weight_capacity
@train = Train.where("id = ?", params[:id])
@train.first.remaining_weight_capacity
continue
@train.first.remaining_weight_capacity
@train.first.total_weight
@train.first,total_weight
@train.total_weight
@train
@train.first
@train
@train = Train.where("id = ?", params[:id])
@train
@parcel
params
continue
train_line.line.name
continue
@train.train_lines
continue
@train.train_lines
continue
@parcel.update(status: 1, train_id: params[:id])
@parcel
@pacel
@parcel = Parcel.find(params[:parcel])
parcel
@parcel
@train.update
@train = Train.find(params[:id])
@train = Train.find(id)
@train
params
continue
params
continue
params
params'
continue
params.parcel_id
params
continue
params
continue
params[:param1]
params
param1
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
    @parcels = Parcel.all.where("status = ?", 0)
    @parcels = Parcel.all.where("status = ?", "to_be_shipped")
    @parcels = Parcel.all.where("status = ?", to_be_shipped)
@parcels
continue
@train.id
@train
 @train = Train.where("id= ?", params[:id]).first
@train.id
@train
 @train = Train.where("id= ?", params[:id])
@train
 @train = Train.where("id= ?", params[:id]).first
@train
 @train = Train.where("id= ?", params[:id])
@train = Train.where("id= ?", params[:id])
params
continue
@train
params
continue
@train = Train.where("id= ?", params[:id])
@train = Train.where("id= ?", params.id)
params
continue
@train.id
@train
params
continue
params
params[:train][:line_ids].reject(&:empty?)
array.reject(&:empty?)
Line.find(params[:train][:line_ids])
params[:train][:line_ids].find
params[:train][:line_ids]
params.line_ids
params.line_lids
params[:line_ids]
params
continue
params
continue
n
continue
parcel
n
lowest_price_train
n
continue
n
lowest_price_train
lowest_price_train.capacity >= parcel.weight
 lowest_price_train.capacity >= parcel.weight
n
parcel
n
lowest_price_train
n
current_user.role == "post_master"
continue
    <%= trainline.text_field :train_line %>  
    <%= trainline.label :Train_line %><br>
<%= form.fields_for train_line, index: train_line.id do |trainline| %>
continue
lowest_price_train.capacity < lowest_price_train.total_weight
lowest_price_train.capacity > lowest_price_train.total_weight
lowest_price_train.capacity
      lowest_price_train.update(capacity: lowest_price_train.total_weight - lowest_price_train.parcels.sum(:weight))
lowest_price_train.update(capacity: lowest_price_train.total_weight - total_parcel_weight)
parcel.update(train_id: lowest_price_train.id)
 parcel = Parcel.find(params[:id])
lowest_price_train = Train.order(cost: :asc).first
lowest_price_train.update(capacity: lowest_price_train.total_weight - total_parcel_weight)
continue
lowest_price_train.update(capacity: lowest_price_train.total_weight - total_parcel_weight)
lowest_price_train.update(capacity: train.total_weight - total_parcel_weight)
total_parcel_weight = lowest_price_train.parcels.sum(:weight)  
    total_parcel_weight = train.parcels.sum(:weight)  
lowest_price_train.total_weight
lowest_price_train.parcels
lowest_price_train
lowest_price_train.update(capacity: 123)
lowest_price_train.update(capacity)
lowest_price_train
 parcel.update(train_id: lowest_price_train.id)
 parcel = Parcel.find(params[:id])
 lowest_price_train = Train.order(cost: :asc).first
continue
lowest_price_train.update(capacity: total_weight-parcel.weight)
parcel.weight
parcel
      parcel.update(train_id: lowest_price_train.id)
      parcel = Parcel.find(params[:id])
parcel
lowest_price_train.parcels
lowest_price_train.total_weight
lowest_price_train.total_weight)
      #lowest_price_train.update(capacity: total_weight-)
lowest_price_train.id
lowest_price_train.total_weight
lowest_price_train.total_Weight
lowest_price_train
lowest_price_train.weight
lowest_price_train = Train.order(cost: :asc).first
continue
w = Train.where("id = ?", t)
sss
s
sss
w
w = Train.where("id = ?", t)
w
w[:weight]
w.weight
w
w = Train.where("id = ?", t)
w.total_weight
w = Train.where("id = ?", t)
w = Train.where("id = ?", t).total_weight
w.weight
w = Train.where("id = ?", t)
Train.where("id = ?", t)
Train.where("id = ?", t).weight
Train.where("id = ?", t)
t = lowest_price_train.ids.first
lowest_price_train.ids.first
lowest_price_train.weights
lowest_price_train.ids
lowest_price_train.weight
lowest_price_train = Train.where("cost = ?", lowest_price)
